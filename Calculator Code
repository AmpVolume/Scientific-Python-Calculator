import tkinter as tk
from tkinter import messagebox
import math

def root(x, n):
    return x ** (1 / n)

def logn(x, base):
    return math.log(x, base)

class ScientificCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Scientific Calculator")
        self.expression = ""
        self.history = []
        self.mode = "DEG"

        self.entry = tk.Entry(root, width=40, borderwidth=5, font=("Arial", 16))
        self.entry.grid(row=0, column=0, columnspan=6, padx=10, pady=10)

        self.create_buttons()

    def add_to_expression(self, value):
        self.expression += str(value)
        self.update_entry()

    def clear_expression(self):
        self.expression = ""
        self.update_entry()

    def delete_last(self):
        self.expression = self.expression[:-1]
        self.update_entry()

    def update_entry(self):
        self.entry.delete(0, tk.END)
        self.entry.insert(0, self.expression)

    def calculate(self):
        try:
            expr = self.expression.replace("^", "**")
            expr = expr.replace("√", "root(")  # will assume user enters like "ⁿ√x" as root(n,x)

            if self.mode == "DEG":
                expr = expr.replace("sin(", "math.sin(math.radians(")
                expr = expr.replace("cos(", "math.cos(math.radians(")
                expr = expr.replace("tan(", "math.tan(math.radians(")
                expr = expr.replace("asin(", "math.degrees(math.asin(")
                expr = expr.replace("acos(", "math.degrees(math.acos(")
                expr = expr.replace("atan(", "math.degrees(math.atan(")
            else:
                expr = expr.replace("sin(", "math.sin(")
                expr = expr.replace("cos(", "math.cos(")
                expr = expr.replace("tan(", "math.tan(")
                expr = expr.replace("asin(", "math.asin(")
                expr = expr.replace("acos(", "math.acos(")
                expr = expr.replace("atan(", "math.atan(")

            expr = expr.replace("sinh(", "math.sinh(")
            expr = expr.replace("cosh(", "math.cosh(")
            expr = expr.replace("tanh(", "math.tanh(")
            expr = expr.replace("log(", "math.log(")
            expr = expr.replace("sqrt(", "math.sqrt(")
            expr = expr.replace("exp(", "math.exp(")
            expr = expr.replace("pi", str(math.pi))
            expr = expr.replace("e", str(math.e))
            expr = expr.replace("!", "math.factorial(")  # will need manual fix in eval call

            # Custom replacements
            expr = expr.replace("logn(", "logn(")
            expr = expr.replace("root(", "root(")

            # Handle factorial manually
            if "math.factorial" in expr:
                while "math.factorial" in expr:
                    i = expr.index("math.factorial")
                    start = i + len("math.factorial(")
                    end = start
                    count = 1
                    while count > 0 and end < len(expr):
                        if expr[end] == "(":
                            count += 1
                        elif expr[end] == ")":
                            count -= 1
                        end += 1
                    sub = expr[i:end]
                    result = str(eval(sub, {"__builtins__": {}}, {"math": math}))
                    expr = expr.replace(sub, result)

            result = eval(expr, {"__builtins__": {}}, {
                "math": math, "root": root, "logn": logn
            })
            self.history.append(f"{self.expression} = {result}")
            self.expression = str(result)
            self.update_entry()
        except Exception as e:
            messagebox.showerror("Error", f"Invalid Expression\n{e}")

    def toggle_mode(self):
        self.mode = "RAD" if self.mode == "DEG" else "DEG"
        messagebox.showinfo("Mode Toggled", f"Switched to {self.mode} mode")

    def show_history(self):
        history_text = "\n".join(self.history[-10:] or ["No history yet."])
        messagebox.showinfo("History", history_text)

    def create_buttons(self):
        buttons = [
            ("7", 1, 0), ("8", 1, 1), ("9", 1, 2), ("/", 1, 3), ("sin(", 1, 4), ("asin(", 1, 5),
            ("4", 2, 0), ("5", 2, 1), ("6", 2, 2), ("*", 2, 3), ("cos(", 2, 4), ("acos(", 2, 5),
            ("1", 3, 0), ("2", 3, 1), ("3", 3, 2), ("-", 3, 3), ("tan(", 3, 4), ("atan(", 3, 5),
            ("0", 4, 0), (".", 4, 1), ("+", 4, 2), ("^", 4, 3), ("sqrt(", 4, 4), ("%", 4, 5),
            ("log(", 5, 0), ("exp(", 5, 1), ("pi", 5, 2), ("e", 5, 3), ("(", 5, 4), (")", 5, 5),
            ("sinh(", 6, 0), ("cosh(", 6, 1), ("tanh(", 6, 2), ("logn(", 6, 3), ("root(", 6, 4), ("!", 6, 5),
            ("C", 7, 0), ("DEL", 7, 1), ("=", 7, 2), ("HIST", 7, 3), ("MODE", 7, 4)
        ]

        for (text, row, col) in buttons:
            action = lambda x=text: self.handle_button(x)
            tk.Button(self.root, text=text, width=6, height=2, command=action).grid(row=row, column=col, padx=2, pady=2)

    def handle_button(self, label):
        if label == "=":
            self.calculate()
        elif label == "C":
            self.clear_expression()
        elif label == "DEL":
            self.delete_last()
        elif label == "HIST":
            self.show_history()
        elif label == "MODE":
            self.toggle_mode()
        else:
            self.add_to_expression(label)

if __name__ == "__main__":
    root = tk.Tk()
    calc = ScientificCalculator(root)
    root.mainloop()
